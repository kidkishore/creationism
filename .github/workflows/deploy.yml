name: Deploy CloudFormation

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 1: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: Ensure S3 Bucket exists (for Lambda zips)
      - name: Ensure S3 Bucket exists
        run: |
          aws s3api head-bucket --bucket creationism-lambda-code || \
          aws s3api create-bucket --bucket creationism-lambda-code --region ${{ secrets.AWS_REGION }} \
            --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}

      #################################################
      # Package WebSocket Handler Lambda
      #################################################
      - name: Package WebSocket Handler
        run: |
          mkdir -p build/websocket
          cd build/websocket
          pip install --target . boto3 requests --no-deps
          cp ../../lambda/websocket_handler.py .
          find . -type d -name "__pycache__" -exec rm -rf {} +
          zip -r websocket_handler.zip ./*
          TIMESTAMP=$(date +%s)
          export WEBSOCKET_ZIP="websocket_handler_${TIMESTAMP}.zip"
          mv websocket_handler.zip "$WEBSOCKET_ZIP"
          cd ../..
          echo "WEBSOCKET_ZIP=$WEBSOCKET_ZIP" >> $GITHUB_ENV

      - name: Upload WebSocket Handler
        run: |
          aws s3 cp build/websocket/${{ env.WEBSOCKET_ZIP }} s3://creationism-lambda-code/${{ env.WEBSOCKET_ZIP }}

      #################################################
      # Package Replicate Worker Lambda
      #################################################
      - name: Package Replicate Worker
        run: |
          mkdir -p build/worker
          cd build/worker
          
          # Create and activate virtual environment
          python -m venv venv
          source venv/bin/activate
          
          # Install dependencies into a temporary directory
          mkdir python
          pip install \
            boto3 \
            requests \
            numpy \
            idna \
            charset-normalizer \
            urllib3 \
            certifi \
            --target ./python
          
          # Copy the Lambda handler
          cp ../../lambda/replicate_worker.py python/
          
          # Clean up unnecessary files
          cd python
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete
          find . -type f -name "*.pyo" -delete
          find . -type f -name "*.pyd" -delete
          
          # Create deployment package
          zip -r ../replicate_worker.zip .
          cd ..
          
          # Generate timestamp and set environment variable
          TIMESTAMP=$(date +%s)
          export WORKER_ZIP="replicate_worker_${TIMESTAMP}.zip"
          mv replicate_worker.zip "$WORKER_ZIP"
          cd ../..
          echo "WORKER_ZIP=$WORKER_ZIP" >> $GITHUB_ENV

      - name: Upload Replicate Worker
        run: |
          aws s3 cp build/worker/${{ env.WORKER_ZIP }} s3://creationism-lambda-code/${{ env.WORKER_ZIP }}

      #################################################
      # Deploy CloudFormation Stack
      #################################################
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name creationism-stack \
            --template-file cfn/infrastructure.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              LambdaCodeBucket=creationism-lambda-code \
              WebsocketHandlerKey=${{ env.WEBSOCKET_ZIP }} \
              WorkerHandlerKey=${{ env.WORKER_ZIP }} \
              ReplicateApiKey=${{ secrets.REPLICATE_API_KEY }}
