name: Deploy CloudFormation

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 1: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: Ensure S3 Bucket exists (for Lambda zips)
      - name: Ensure S3 Bucket for Lambda Exists
        run: |
          aws s3api head-bucket --bucket creationism-lambda-code || \
          aws s3api create-bucket --bucket creationism-lambda-code --region ${{ secrets.AWS_REGION }} \
            --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}

      #################################################
      # Package WebSocket Handler Lambda
      #################################################
      - name: Package WebSocket Handler
        run: |
          mkdir -p build/websocket
          python3 -m venv build/websocket/venv
          source build/websocket/venv/bin/activate
          pip install requests boto3
          deactivate
          cp lambda/websocket_handler.py build/websocket/
          cp -r build/websocket/venv/lib/python3.*/site-packages/* build/websocket/

          cd build/websocket
          zip -r websocket_handler.zip ./*
          TIMESTAMP=$(date +%s)
          export WEBSOCKET_ZIP="websocket_handler_${TIMESTAMP}.zip"
          mv websocket_handler.zip "$WEBSOCKET_ZIP"
          cd ../..
          echo "WEBSOCKET_ZIP=$WEBSOCKET_ZIP" >> $GITHUB_ENV

      - name: Upload WebSocket Handler
        run: |
          aws s3 cp build/websocket/${{ env.WEBSOCKET_ZIP }} s3://creationism-lambda-code/${{ env.WEBSOCKET_ZIP }}

      #################################################
      # Package Replicate Worker Lambda
      #################################################
      - name: Package Replicate Worker
        run: |
          mkdir -p build/worker
          python3 -m venv build/worker/venv
          source build/worker/venv/bin/activate
          pip install requests boto3 numpy
          deactivate
          cp lambda/replicate_worker.py build/worker/
          cp -r build/worker/venv/lib/python3.*/site-packages/* build/worker/

          cd build/worker
          zip -r replicate_worker.zip ./*
          TIMESTAMP=$(date +%s)
          export WORKER_ZIP="replicate_worker_${TIMESTAMP}.zip"
          mv replicate_worker.zip "$WORKER_ZIP"
          cd ../..
          echo "WORKER_ZIP=$WORKER_ZIP" >> $GITHUB_ENV

      - name: Upload Replicate Worker
        run: |
          aws s3 cp build/worker/${{ env.WORKER_ZIP }} s3://creationism-lambda-code/${{ env.WORKER_ZIP }}

      #################################################
      # Deploy CloudFormation Stack
      #################################################
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name creationism-stack \
            --template-file cfn/infrastructure.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              LambdaCodeBucket=creationism-lambda-code \
              WebsocketHandlerKey=${{ env.WEBSOCKET_ZIP }} \
              WorkerHandlerKey=${{ env.WORKER_ZIP }} \
              ReplicateApiKey=${{ secrets.REPLICATE_API_KEY }}
