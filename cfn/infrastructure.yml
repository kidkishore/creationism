AWSTemplateFormatVersion: "2010-09-09"
Description: Creationism Project - WebSocket + Async Text-to-3D

Parameters:
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing the Lambda zip.

  WebsocketHandlerKey:
    Type: String
    Description: Key for the WebSocket handler Lambda zip.

  WorkerHandlerKey:
    Type: String
    Description: Key for the worker Lambda zip.

  ReplicateApiKey:
    Type: String
    Description: The Replicate API key.
    NoEcho: true

Resources:
  # DynamoDB Table (job status)
  JobStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: creationism-job-status
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # DynamoDB Table (WebSocket connections)
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: creationism-connections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # S3 Bucket for models
  ImageStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: creationism-image-storage
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET]
            AllowedOrigins: ["*"]
            MaxAge: 3000

  # SQS Queue
  ReplicateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: creationism-replicate-queue
      VisibilityTimeout: 900 # Match Lambda timeout

  # IAM Role for WebSocket Handler
  WebSocketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WebSocketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt JobStatusTable.Arn
                  - !GetAtt ConnectionsTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt ReplicateQueue.Arn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: "*"

  # WebSocket Handler Lambda
  WebSocketHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-WebSocketHandler"
      Handler: websocket_handler.lambda_handler
      Runtime: python3.9
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref WebsocketHandlerKey
      Timeout: 900 # up to 15 minutes if needed
      MemorySize: 512
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          JOB_TABLE: !Ref JobStatusTable
          REPLICATE_QUEUE_URL: !GetAtt ReplicateQueue.QueueUrl

  # IAM Role for Worker Lambda
  WorkerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WorkerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt JobStatusTable.Arn

              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${ImageStorageBucket}/*"

              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ReplicateQueue.Arn

              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: "*"

  # Worker Lambda
  ReplicateWorkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ReplicateWorker"
      Handler: replicate_worker.lambda_handler
      Runtime: python3.9
      Role: !GetAtt WorkerLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref WorkerHandlerKey
      Timeout: 900
      MemorySize: 3008
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          REPLICATE_API_KEY: !Ref ReplicateApiKey
          JOB_TABLE: !Ref JobStatusTable
          BUCKET_NAME: !Ref ImageStorageBucket

  # Event Source Mapping from SQS to Worker Lambda
  WorkerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ReplicateQueue.Arn
      FunctionName: !Ref ReplicateWorkerFunction
      BatchSize: 1

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-WebSocketAPI"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # $connect route
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations
      IntegrationMethod: POST

  # $disconnect route
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations
      IntegrationMethod: POST

  # generate route
  GenerateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "generate"
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref GenerateIntegration

  GenerateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations
      IntegrationMethod: POST

  # Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: prod
      AutoDeploy: true

  # Permissions for Lambda to be invoked by WebSocket
  WebSocketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSocketHandlerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

Outputs:
  WebSocketEndpoint:
    Description: "The wss:// endpoint for your WebSocket API"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
